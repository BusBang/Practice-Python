# 최적 전략 알고리즘
#   - coins = [2, 7, 19, 40, 4, 9]
#   - 위와 같이 숫자가 써있는 6개의 동전이 순서대로 놓여있을 때,
#     선수 2명은 번갈아가면서 동전을 집어 갈 수 있습니다.
#     단 왼쪽 끝이나 오른쪽 끝에서만 가지고 갈 수 있습니다.
#     각 동전에 써있는 숫자가 점수입니다.
#     가지고 온 동전의 점수 합이 큰 사람이 이기는 게임입니다.
#     내가 선일때, 내가 무조건 이기는 알고리즘을 만들어보세요.

# 나     : 9 40 7 = 56
# 상대방 : 4 19 2 = 25
# 동전이 6개일 때, 경우의 수 : 2^5

# dp 를 선언한다. <- 매트릭스에 어떻게 표현할 지 떠올려야한다. 리스트 속 리스트.
# 문제를 나누어서 분할 정복을 해줘야함. if) coins = [2, 7, 40, 19]
# 4 x 4 matrix
#     0     1       2       3     <- 존재하는 코인 갯수
# 0 2, 0  7, 2    42, 7   42, 26  <- 2+40, 7+19 ; 자세히보면 좌측이나 하단 것을 참고하여 가져올 수 있다.
# 1       7, 0    40, 7   26, 40
# 2               40, 0   40, 19
# 3                       19, 0

# - 0행 2열을 선택하는 경우의 수 : 총 2가지. coins = [2, 7, 40]
# - 2(왼쪽) + (1행 2열)의 [2번째] 7 vs 40 -> 9 vs 40
# - OR 40(오른쪽) + (0행 1열)의 [2번째] 2 vs 7 -> 42 vs 7   나 : max(9, 42) 상대방 : min (7, 40)

# - 1행 3열을 선택하는 경우의 수 : 총 2가지. coins = [7, 40, 19]
# - 7(왼쪽) + (2행 3열)꺼의 [2번째] 19 vs 40 -> 26 vs 40
# - OR 19(오른쪽) + (1행 2열)의 [2번째] 7 vs 40 -> 26 vs 40

# - 0행 3열을 선택하는 경우의 수 : 총 2가지. coins = [2, 7, 40, 19]
# - 2(왼쪽) + (1행 3열)의 [2번째] 40 vs 26 -> 42 vs 26     Max(42, 26)
# - OR 19(오른쪽) + (0행 2열)의 [2번째] 7 vs 42 -> 26 vs 42
